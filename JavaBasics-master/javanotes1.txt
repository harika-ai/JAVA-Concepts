stack memory 				

public static void mult(int m , int n) //method signature // lines 24-27 method implementation
	{
		int res1 = m * n;
		System.out.println(res1);
	}



					heap memory

main()					l--25
{					j =5.2			stack pool area
	10				main()
	1.0				mult(m,n) --- 
	25				i
	5.2				k	
	600				add(x,y)
	30.2

											obj is reference variable to store address of the object.			code:	Demo obj = new Demo();
		System.out.println(obj.i);
		System.out.println(obj.k);
		System.out.println(l);
		System.out.println(j);
		mult(20,30);
		obj.add((int) j, l);
	
class loader
JVM

Note : Local variables are created inside the stack memory because the method execution is done in stack memory and local variables are present inside the method only.

** why local variables are not declared as static?
 local variables will store the result of the method. If the method is non static then we are unable to store the non static method result into static variable.
Actually for non static variables multiple copies are present but local variables scope is within the method so there is no issue with multiple copies. 






Stack memory							heap memory

main()								i = 50
{								main()
30								j --30 -- obj1
50								j --30 --- obj2
30								j --30 --- obj3
30



Class loader
JVM

Note: In Java at any point of time we have only 1 copy of static members
Reason:static members are loaded by class loader but the class loader is under control of JVM
JVM is designed in such a way that for each class class loader can call only once for all static members.
  
 But for non static members, based on the no. of repeatitions(no. of times creation object) of "new" keyword. === No. of times class loader called by JVM.
Thats why non static members are multiple copies which is under the control of user.

*******
Note: main method is static because the object creation will be done inside the main.
If main method itself is non static then we need to create the object for that we need main method but it is not possible(as main method is non static). 

*******


























